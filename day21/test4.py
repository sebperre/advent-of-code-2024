import math

f = open("input.txt")

codes = []

for line in f:
    codes.append(line.strip())

dict_dirs_numpads = {('0', '0'): ['A'], ('0', '1'): ['^<A'], ('0', '2'): ['^A'], ('0', '3'): ['^>A', '>^A'], ('0', '4'): ['^^<A', '^<^A'], ('0', '5'): ['^^A'], ('0', '6'): ['^^>A', '^>^A', '>^^A'], ('0', '7'): ['^^^<A', '^^<^A', '^<^^A'], ('0', '8'): ['^^^A'], ('0', '9'): ['^^^>A', '^^>^A', '^>^^A', '>^^^A'], ('0', 'A'): ['>A'], ('1', '0'): ['>vA'], ('1', '1'): ['A'], ('1', '2'): ['>A'], ('1', '3'): ['>>A'], ('1', '4'): ['^A'], ('1', '5'): ['^>A', '>^A'], ('1', '6'): ['^>>A', '>^>A', '>>^A'], ('1', '7'): ['^^A'], ('1', '8'): ['^^>A', '^>^A', '>^^A'], ('1', '9'): ['^^>>A', '^>^>A', '^>>^A', '>^^>A', '>^>^A', '>>^^A'], ('1', 'A'): ['>v>A', '>>vA'], ('2', '0'): ['vA'], ('2', '1'): ['<A'], ('2', '2'): ['A'], ('2', '3'): ['>A'], ('2', '4'): ['^<A', '<^A'], ('2', '5'): ['^A'], ('2', '6'): ['^>A', '>^A'], ('2', '7'): ['^^<A', '^<^A', '<^^A'], ('2', '8'): ['^^A'], ('2', '9'): ['^^>A', '^>^A', '>^^A'], ('2', 'A'): ['v>A', '>vA'], ('3', '0'): ['v<A', '<vA'], ('3', '1'): ['<<A'], ('3', '2'): ['<A'], ('3', '3'): ['A'], ('3', '4'): ['^<<A', '<^<A', '<<^A'], ('3', '5'): ['^<A', '<^A'], ('3', '6'): ['^A'], ('3', '7'): ['^^<<A', '^<^<A', '^<<^A', '<^^<A', '<^<^A', '<<^^A'], ('3', '8'): ['^^<A', '^<^A', '<^^A'], ('3', '9'): ['^^A'], ('3', 'A'): ['vA'], ('4', '0'): ['v>vA', '>vvA'], ('4', '1'): ['vA'], ('4', '2'): ['v>A', '>vA'], ('4', '3'): ['v>>A', '>v>A', '>>vA'], ('4', '4'): ['A'], ('4', '5'): ['>A'], ('4', '6'): ['>>A'], ('4', '7'): ['^A'], ('4', '8'): ['^>A', '>^A'], ('4', '9'): ['^>>A', '>^>A', '>>^A'], ('4', 'A'): ['v>v>A', 'v>>vA', '>vv>A', '>v>vA', '>>vvA'], ('5', '0'): ['vvA'], ('5', '1'): ['v<A', '<vA'], ('5', '2'): ['vA'], ('5', '3'): ['v>A', '>vA'], ('5', '4'): ['<A'], ('5', '5'): ['A'], ('5', '6'): ['>A'], ('5', '7'): ['^<A', '<^A'], ('5', '8'): ['^A'], ('5', '9'): ['^>A', '>^A'], ('5', 'A'): ['vv>A', 'v>vA', '>vvA'], ('6', '0'): ['vv<A', 'v<vA', '<vvA'], ('6', '1'): ['v<<A', '<v<A', '<<vA'], ('6', '2'): ['v<A', '<vA'], ('6', '3'): ['vA'], ('6', '4'): ['<<A'], ('6', '5'): ['<A'], ('6', '6'): ['A'], ('6', '7'): ['^<<A', '<^<A', '<<^A'], ('6', '8'): ['^<A', '<^A'], ('6', '9'): ['^A'], ('6', 'A'): ['vvA'], ('7', '0'): ['vv>vA', 'v>vvA', '>vvvA'], ('7', '1'): ['vvA'], ('7', '2'): ['vv>A', 'v>vA', '>vvA'], ('7', '3'): ['vv>>A', 'v>v>A', 'v>>vA', '>vv>A', '>v>vA', '>>vvA'], ('7', '4'): ['vA'], ('7', '5'): ['v>A', '>vA'], ('7', '6'): ['v>>A', '>v>A', '>>vA'], ('7', '7'): ['A'], ('7', '8'): ['>A'], ('7', '9'): ['>>A'], ('7', 'A'): ['vv>v>A', 'vv>>vA', 'v>vv>A', 'v>v>vA', 'v>>vvA', '>vvv>A', '>vv>vA', '>v>vvA', '>>vvvA'], ('8', '0'): ['vvvA'], ('8', '1'): ['vv<A', 'v<vA', '<vvA'], ('8', '2'): ['vvA'], ('8', '3'): ['vv>A', 'v>vA', '>vvA'], ('8', '4'): ['v<A', '<vA'], ('8', '5'): ['vA'], ('8', '6'): ['v>A', '>vA'], ('8', '7'): ['<A'], ('8', '8'): ['A'], ('8', '9'): ['>A'], ('8', 'A'): ['vvv>A', 'vv>vA', 'v>vvA', '>vvvA'], ('9', '0'): ['vvv<A', 'vv<vA', 'v<vvA', '<vvvA'], ('9', '1'): ['vv<<A', 'v<v<A', 'v<<vA', '<vv<A', '<v<vA', '<<vvA'], ('9', '2'): ['vv<A', 'v<vA', '<vvA'], ('9', '3'): ['vvA'], ('9', '4'): ['v<<A', '<v<A', '<<vA'], ('9', '5'): ['v<A', '<vA'], ('9', '6'): ['vA'], ('9', '7'): ['<<A'], ('9', '8'): ['<A'], ('9', '9'): ['A'], ('9', 'A'): ['vvvA'], ('A', '0'): ['<A'], ('A', '1'): ['^<<A', '<^<A'], ('A', '2'): ['^<A', '<^A'], ('A', '3'): ['^A'], ('A', '4'): ['^^<<A', '^<^<A', '^<<^A', '<^^<A', '<^<^A'], ('A', '5'): ['^^<A', '^<^A', '<^^A'], ('A', '6'): ['^^A'], ('A', '7'): ['^^^<<A', '^^<^<A', '^^<<^A', '^<^^<A', '^<^<^A', '^<<^^A', '<^^^<A', '<^^<^A', '<^<^^A'], ('A', '8'): ['^^^<A', '^^<^A', '^<^^A', '<^^^A'], ('A', '9'): ['^^^A'], ('A', 'A'): ['A']}
dict_dirs_arrowpad = {('^', '^'): [''], ('^', '>'): ['v>', '>v'], ('^', '<'): ['v<'], ('^', 'v'): ['v'], ('^', 'A'): ['>'], ('>', '^'): ['<^', '^<'], ('>', '>'): [''], ('>', '<'): ['<<'], ('>', 'v'): ['<'], ('>', 'A'): ['^'], ('<', '^'): ['>^'], ('<', '>'): ['>>'], ('<', '<'): [''], ('<', 'v'): ['>'], ('<', 'A'): ['>^>', '>>^'], ('v', '^'): ['^'], ('v', '>'): ['>'], ('v', '<'): ['<'], ('v', 'v'): [''], ('v', 'A'): ['>^', '^>'], ('A', '^'): ['<'], ('A', '>'): ['v'], ('A', '<'): ['v<<', '<v<'], ('A', 'v'): ['<v', 'v<'], ('A', 'A'): ['']}

max_depth = 25
memo = {}

def dfs(code, depth):
    if depth == max_depth or code == "":
        return len(code)
    if (code, depth) in memo:
        return memo[(code, depth)]
    res = 0
    for i in range(len(code) + 1):
        if i == 0:
            m = math.inf
            for pos in dict_dirs_arrowpad[("A", code[i])]:
                m = min(m, dfs(pos, depth + 1))
            res += m
        elif i == len(code):
            m = math.inf
            for pos in dict_dirs_arrowpad[(code[i - 1], "A")]:
                m = min(m, dfs(pos, depth + 1))
            res += 1 + m
        else:
            m = math.inf
            for pos in dict_dirs_arrowpad[(code[i - 1], code[i])]:
                m = min(m, dfs(pos, depth + 1))
            res += 1 + m
    memo[(code, depth)] = res
    return memo[(code, depth)]

def dfs_numpad(i, curr, code, ans):
    if i == len(code):
        ans.append(curr)
        return
    for seq in dict_dirs_numpads[(code[i - 1], code[i])]:
        dfs_numpad(i + 1, curr + seq, code, ans)

def process_numpad(code):
    results = []
    dfs_numpad(1, "", code, results)
    return results

def process_code(code):
    code = "A" + code

    numpad_to_arrow_pad = process_numpad(code)
    numpad_to_arrow_pad = [res[:len(res) - 1] for res in numpad_to_arrow_pad]

    print(numpad_to_arrow_pad)

    m = math.inf
    for code in numpad_to_arrow_pad:
        m = min(m, dfs(code, 0) + 1)

    return m

res = 0

for code in codes:
    res += int(code[0:3]) * process_code(code)

print(res)

